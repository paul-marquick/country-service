@page "/country/edit/{iso2}"

@using CountryService.BlazorAdminApp.HttpClients
@using CountryService.Dtos.Country    
@using System.Threading
@inject ICountryHttpClient countryHttpClient
@inject NavigationManager navigationManager
@inject ToastService toastService

<PageTitle>Edit Country</PageTitle>

<h1>Edit Country</h1>

@if (loadComplete)
{
    @if (success)
    {
        <EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit" FormName="EditCountry">

            <DataAnnotationsValidator />

            <div class="mb-3 col-md-6">
                <label for="@Model.Iso2" class="form-label">@Resource.Iso2</label>
                <InputText class="form-control" @bind-Value="@Model.Iso2" />
                <ValidationMessage For="() => Model!.Iso2" />
            </div>

            <div class="mb-3 col-md-6">
                <label for="@Model.Iso3" class="form-label">@Resource.Iso3</label>
                <InputText class="form-control" @bind-Value="@Model.Iso3" />
                <ValidationMessage For="() => Model!.Iso3" />
            </div>

            <div class="mb-3 col-md-6">
                <label for="@Model.IsoNumber" class="form-label">@Resource.IsoNumber</label>
                <InputNumber class="form-control" @bind-Value="@Model.IsoNumber" />
                <ValidationMessage For="() => Model!.IsoNumber" />
            </div>

            <div class="mb-3 col-md-6">
                <label for="@Model.Name" class="form-label">@Resource.Name</label>
                <InputText class="form-control" @bind-Value="@Model.Name" />
                <ValidationMessage For="() => Model!.Name" />
            </div>

            <div class="mb-3 col-md-6">
                <label for="@Model.CallingCode" class="form-label">@Resource.CallingCode</label>
                <InputText class="form-control" @bind-Value="@Model.CallingCode" />
            </div>

            <div class="btn-group">

                <button type="submit" class="btn btn-success">
                    <i class="bi bi-floppy"></i>
                    Save
                </button>

                <a class="btn btn-danger" href="country/delete/@iso2" disabled>
                    <i class="bi bi-trash"></i>
                    Delete
                </a>

                <a class="btn btn-secondary" onclick="history.back();">
                    <i class="bi bi-arrow-left"></i>
                    Back
                </a>

            </div>

        </EditForm>
    }
    else
    {
        <br /><br />
        <div class="btn-group">

            <a class="btn btn-secondary" onclick="history.back();">
                <i class="bi bi-arrow-left"></i>
                Back
            </a>

        </div>
    }
}
else
{
    <Spinner Color="SpinnerColor.Success" />
}

@code {
    private EditContext editContext = default!;
    private Country Model = new(); 
    private ValidationMessageStore validationMessageStore = default!;
    private bool loadComplete = false;
    private bool success = false;

    [Parameter]
    public string iso2 { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Model = await countryHttpClient.GetCountryByIso2Async(iso2);
            editContext = new(Model);
            validationMessageStore = new(editContext);
            success = true;
        }
        catch (ValidationProblemDetailsException validationProblemDetailsException)
        {
            toastService.Notify(new(ToastType.Warning, validationProblemDetailsException.ValidationProblemDetails.Title));
            success = false;
        }

        loadComplete = true;
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await countryHttpClient.PutCountryByIso2Async(iso2, Model);

            toastService.Notify(new(ToastType.Success, "Country saved."));

            navigationManager.NavigateTo("country");
        }
        catch (ValidationProblemDetailsException validationProblemDetailsException)
        {
            if (validationProblemDetailsException.ValidationProblemDetails.Type == Shared.Problems.ProblemType.FailedValidation)
            {
                if (validationProblemDetailsException.ValidationProblemDetails.Errors != null &&
                    validationProblemDetailsException.ValidationProblemDetails.Errors.Count > 0)
                {
                    foreach (KeyValuePair<string, string[]> error in validationProblemDetailsException.ValidationProblemDetails.Errors)
                    {
                        foreach (string message in error.Value)
                        {
                            validationMessageStore.Add(() => error.Key, message);
                        }
                    }
                }
            }
            else
            {
                toastService.Notify(new(ToastType.Danger, validationProblemDetailsException.ValidationProblemDetails.Title));
            }
        }
    }
}
